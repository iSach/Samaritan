package be.isach.samaritan.chat;

import be.isach.samaritan.message.MessageScanningThread;
import com.google.code.chatterbotapi.ChatterBot;
import com.google.code.chatterbotapi.ChatterBotFactory;
import com.google.code.chatterbotapi.ChatterBotSession;
import com.google.code.chatterbotapi.ChatterBotType;
import net.dv8tion.jda.core.JDA;
import net.dv8tion.jda.core.entities.Message;
import net.dv8tion.jda.core.entities.MessageChannel;
import net.dv8tion.jda.core.entities.User;

import java.util.List;
import java.util.Map;

/**
 * Project: samaritan
 * Package: be.isach.samaritan.chat
 * Created by: Sacha
 * Created on: 28th mai, 2016
 * at 10:33 am
 * <p>
 * Represents a Chat Thread in a Message Channel.
 */
public class PrivateMessageChatThread extends MessageScanningThread {

    /**
     * True when Chat Thread is active.
     */
    private boolean active;

    /**
     * Bot Session Factory.
     */
    private ChatterBotFactory botFactory;

    /**
     * Bot, created with botFactory.
     */
    private ChatterBot bot;

    /**
     * Bot Session, created with bot.
     */
    private ChatterBotSession botSession;

    /**
     * User talking with Samaritan.
     */
    private User user;

    /**
     * Chat Thread Map.
     * Used to manage running Chat Threads.
     */
    private Map<User, PrivateMessageChatThread> threadsMap;

    public PrivateMessageChatThread(MessageChannel messageChannel, JDA jda, User user, Message firstMessage, Map<User, PrivateMessageChatThread> chatThreadMap) {
        super(messageChannel, jda, user);

        this.threadsMap = chatThreadMap;
        this.botFactory = new ChatterBotFactory();
        this.active = true;
        this.user = user;

        createBotSessions();

        if (firstMessage == null) messageChannel.sendMessage("Hey, wanna talk?");
        else setScannedMessaged(firstMessage);

        jda.addEventListener(this);

        chatThreadMap.put(user, this);
    }

    /**
     * Creates Bot and the Bot Session.
     * Uses CleverBot.
     */
    private void createBotSessions() {
        try {
            bot = botFactory.create(ChatterBotType.CLEVERBOT);
            botSession = bot.createSession();
        } catch (Exception e) {
            interrupt();
        }
    }

    /**
     * Called when Thread is started.
     * Starts a while loop, running until being killed with kill();
     * This loop scans constantly for input in the Text Channel.
     * When while loop stops, it removes itself from the lists
     * it was moved in, and tries to send a message to notify its crash.
     */
    @Override
    protected void onRun() {
        while (active) {
            Message nM = nextMessage();
            String s = nM.getContent();
            try {
                String reply = botSession.think(s);
                getMessageChannel().sendMessage(reply);
                debugMessage(nM.getAuthor().getName(), s, reply);
                sleep(750);
            } catch (Exception e) {
                e.printStackTrace();
                getMessageChannel().sendMessage("Fatal Error @ \"CHAT_THREAD\" | thread_" + getId());
                break;
            }
        }
        if (getMessageChannel() != null)
            getMessageChannel().sendMessage("I CRASHED HEEELP!!! Just kidding," +
                    " you should be able to talk to me again, try in a few seconds.");
        threadsMap.remove(this);
    }

    /**
     * Debugs Author, input and output.
     *
     * @param author The Input Message Author.
     * @param in     The Input Message Content.
     * @param out    Output, generated by the botSession.
     */
    private void debugMessage(String author, String in, String out) {
        System.out.println("");
        System.out.println("Processing Response for PM from: " + author + ":");
        System.out.println("IN: " + in);
        System.out.println("OUT: " + out);
    }

    /**
     * Stops the Chat Thread.
     */
    public void kill() {
        active = false;
    }
}
